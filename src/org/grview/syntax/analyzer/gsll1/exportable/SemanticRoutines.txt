package org.grview.syntax.analyzer.gsll1.exportable;

import groovy.lang.DelegatingMetaClass;
import groovy.lang.GroovyClassLoader;
import groovy.lang.GroovyObject;

import java.io.File;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.util.Stack;

public class SemanticRoutines {

	private GroovyObject groovyObject;
	
	private File scriptsFile = new File("srs.groovy");
	private Stack<ParseStackNode> parseStack;
	private Analyzer.TableNode[] tabT;
	private Yytoken currentToken;
	private PrintStream out;
	
	public SemanticRoutines(Stack<ParseStackNode> parseStack, Analyzer.TableNode[] tabT, PrintStream out) {
		this (parseStack, tabT, out, null);
	}

	public SemanticRoutines(Stack<ParseStackNode> parseStack, Analyzer.TableNode[] tabT, PrintStream out, File scriptsFile) {
		this.tabT = tabT;
		this.parseStack = parseStack;
		this.out = out;
		if (scriptsFile != null) {
			this.scriptsFile = scriptsFile;
		}
		initialize();
	}
	
	@SuppressWarnings("unchecked")
	private void initialize() {
		try {
			ClassLoader parent = getClass().getClassLoader();
			GroovyClassLoader loader = new GroovyClassLoader(parent);
			Class groovyClass = loader.parseClass(scriptsFile);
			groovyObject = (GroovyObject) groovyClass.newInstance();
			DelegatingMetaClass metaClass = new DelegatingMetaClass(groovyObject.getMetaClass()) {
	
				public Object invokeMethod(Object object, String methodName, Object[] arguments) {
					return super.invokeMethod(object, methodName, arguments);
				}
			};
			metaClass.initialize();
			groovyObject.setMetaClass(metaClass);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void execFunction(String sem) {
		groovyObject.setProperty("tabT", tabT);
		groovyObject.setProperty("parseStack", parseStack);
		groovyObject.setProperty("currentToken", currentToken);
		groovyObject.setProperty("output", out);
		Object[] args = {};
		for (Method m : groovyObject.getClass().getMethods()) {
			if (m.getName().equals(sem)) {
				groovyObject.invokeMethod(sem, args);
			}
		}
	}

	public void setCurrentToken(Yytoken currToken) {
		this.currentToken = currToken;
	}
	
	public Yytoken getCurrentToken() {
		return currentToken;
	}
	
	public void setParseStack(Stack<ParseStackNode> parseStack) {
		this.parseStack = parseStack;
	}

	public Stack<ParseStackNode> getParseStack() {
		return parseStack;
	}

	public void setTabT(Analyzer.TableNode[] tabT) {
		this.tabT = tabT;
	}

	public Analyzer.TableNode[] getTabT() {
		return tabT;
	}

}
